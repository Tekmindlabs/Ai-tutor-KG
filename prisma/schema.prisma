generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?   // From KG Tutor
  role                String    @default("user") // From KG Tutor
  onboarded           Boolean   @default(false)
  lastLogin           DateTime? // From KG Tutor
  phoneNumber         String?
  age                 Int?
  interests           String[]
  gdprConsent         Boolean   @default(false) // From Companion
  consentDate         DateTime?
  preferredLanguage   String?   // From Companion
  educationLevel      String?   // From Companion
  learningStyle       String?   // From Companion
  difficultyPreference String?  // From Companion

  // Relations
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  notes         Notes[]
  tags          Tags[]
  documents     Document[]
  vectorStores  VectorStore[]
  urls          URL[]
  sharedContent SharedContent[] // From KG Tutor
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?    // From Companion (emotional state and analysis)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notes {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   @db.Text
  format    String   @default("text") // From Companion
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  vectors   Vectors[]

  @@index([userId])
}

model Tags {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("tags")
  @@index([userId])
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  vectorId  String?
  metadata  Json?    
  version   Int      
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model VectorStore {
  id         String   @id @default(cuid())
  userId     String
  documentId String?
  embedding  Json
  milvusId   String   @unique
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Vectors {
  id          String   @id @default(cuid())
  contentType String
  contentId   String
  embedding   Float[]
  note        Notes    @relation(fields: [contentId], references: [id])
}

model URL {
  id           String   @id @default(cuid())
  url          String
  title        String?
  content      String   @db.Text
  userId       String
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("urls")
  @@index([userId])
}

model SharedContent {
  id           String   @id @default(cuid())
  ownerId      String
  sharedWithId String
  contentType  String
  contentId    String
  permissions  String[]
  createdAt    DateTime @default(now())
  owner        User     @relation(fields: [ownerId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}